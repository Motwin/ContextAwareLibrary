.TH "_context_aware_android_dev_guide" 3 "Wed Jul 16 2014" "Version ${project.version}" "context-aware-doc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
_context_aware_android_dev_guide \- Context Awareness Android Developer Guide 
The Motwin Context Awareness library is a messaging-based library that provides an API to collect Context information from mobile devices, and send them to the server\&.
.br
 
.br
 A Context Element has a Type and some Data (that can be of any type)\&.
.br
 A Collector must implement Collector interface which requires 3 methods : start, stop and sendContextElement\&.
.br
 The AbstractCollector class implements sendContextElement method for you\&. We also defined 3 base classes for custom Collectors : 
.PD 0

.IP "\(bu" 2
AbstractOneShotCollector that will send ContextElement once on start 
.IP "\(bu" 2
AbstractOnChangeCollector that will send ContextElement each time it changes 
.IP "\(bu" 2
AbstractPeriodicCollector that will send ContextElement at regular interval 
.br
 You can define you own Context Element and Collector by overriding one of the previous Abstract classes\&. You can also use one of the predefined Collectors provided in the library\&. See \fBTable of predefined ContextElements and Collectors\fP\&.
.br

.PP
.SH "Initializing the Context Collector Registry"
.PP
Context Awareness Library entry point is the ContextCollectorRegistryFactory\&. It allows to create a Registry of Context Collectors, as follows : 
.PP
.nf
ContextCollectorRegistry contextCollectorRegistry = ContextCollectorRegistryFactory\&.build(clientChannel, applicationContext, collectors);

.fi
.PP
 The required parameters are : 
.PD 0

.IP "\(bu" 2
clientChannel : the ClientChannel used to forward ContextElements to the server\&. 
.IP "\(bu" 2
applicationContext : as almost every class in Android, ContextCollectorRegistry requires an instance of Context\&. Here, we need the Application Context\&. 
.IP "\(bu" 2
collectors : the list of Collectors to be activated\&.
.PP
.SS "Starting Context Collection"
In order to start context collection, you must call \fBstart()\fP, for instance when your first Activity is started\&. 
.PP
.nf
contextCollectorRegistry\&.start();

.fi
.PP
 This will start all the Collectors declared in the Registry
.SS "Stopping Context Collection"
In order to stop context collection , you must call \fBstop()\fP, for instance when your first Activity is stopped\&. 
.PP
.nf
contextCollectorRegistry\&.stop();

.fi
.PP
 This will start all the Collectors declared in the Registry
.SS "Manually Enable an additional Context Collector"
If you need to add a new Context Collector after starting the Registry, by using the following code : 
.PP
.nf
contextCollectorRegistry\&.enableContextCollector(contextCollector);

.fi
.PP
.SS "Manually Disable a Context Collector"
You can also disable a Context Collector before stopping the Registry as follows : 
.PP
.nf
contextCollectorRegistry\&.disableContextCollector(contextCollector);

.fi
.PP
.SH "Create your custom Context Element and Collector"
.PP
A custom collector can extend one of the 4 following abstract classes : 
.PD 0

.IP "\(bu" 2
AbstractOneShotCollector : context collector that forwards context element once on start 
.IP "\(bu" 2
AbstractOnChangeCollector : context collector that forwards context element each time it changes 
.IP "\(bu" 2
AbstractPeriodicCollector : context collector that forwards context element at regular interval 
.IP "\(bu" 2
AbstractCollector : default context collector\&. These 4 classes use generic type that defines the type of the ContextElement data\&.
.PP
.SS "One Shot Context Collector"
When extending AbstractOneShotCollector, you need to implement the abstract method collect(), which returns the ContextElement that will be forwarded to the server when collector is started\&.
.br
 Here is an example of One Shot Collector that collects the device type\&. 
.PP
.nf
public class DeviceTypeCollector extends AbstractOneShotCollector<String> {

    public DeviceTypeCollector(ClientChannel aClientChannel, Context aApplicationContext) {
        super(aClientChannel, aApplicationContext);
    }

    @Override
    public ContextElement<String> collect() {
        String deviceType = android\&.os\&.Build\&.MODEL;
        ContextElement<String> contextElement = new ContextElement<String>(ContextAware\&.DEVICE_TYPE_KEY, deviceType);
        return contextElement;
    }

}

.fi
.PP
 
.PP
\fBNote:\fP
.RS 4
If the ContextElement returned by the collect method is null, the element will not be forwarded to the server\&.
.RE
.PP
.SS "On Change Context Collector"
When extending AbstractOnChangeCollector, you need to implement the abstract methods start() and stop(), which should register / unregister the listener to the value of the context element\&. When the listener is notified with a new value, it should call onChange method to forward the context element to the server\&.
.br
 Here is an example of On Change Collector that collects the device type\&. 
.PP
.nf
public class ChargingStateCollector extends AbstractOnChangeCollector<Boolean> {

    private final BroadcastReceiver batteryReceiver;

    public ChargingStateCollector(ClientChannel aClientChannel, Context aApplicationContext, long aMinDelay) {
        super(aClientChannel, aApplicationContext, aMinDelay);
        batteryReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context c, Intent anIntent) {
                handleBatterieChangeEvent(anIntent);

            }
        };
    }

    @Override
    public void start() {
        Intent intent = getApplicationContext()\&.registerReceiver(batteryReceiver,
                new IntentFilter(Intent\&.ACTION_BATTERY_CHANGED));
        // using sticky broadcast to init the charger type\&.
        if (intent != null) {
            handleBatterieChangeEvent(intent);
        }

    }

    @Override
    public void stop() {
        getApplicationContext()\&.unregisterReceiver(batteryReceiver);

    }

    protected void handleBatterieChangeEvent(Intent anIntent) {
        Preconditions\&.checkNotNull(anIntent, 'Intent cannot be null');

        int chargePlug = anIntent\&.getIntExtra(BatteryManager\&.EXTRA_PLUGGED, 0);
        boolean isCharging = chargePlug != 0;

        ContextElement<Boolean> contextElement = new ContextElement<Boolean>(ContextAware\&.CHARGING_STATE_KEY,
                isCharging);
        onChange(contextElement);

    }
}

.fi
.PP
.PP
\fBNote:\fP
.RS 4
The AbstractOnChangeCollector constructor requires an additional parameter called aMinDelay which defines the minimum delay between context upadtes, in milliseconds\&.
.br
 When onChange method is called, AbstractOnChangeCollector will forward the context element to the server if 
.PD 0

.IP "\(bu" 2
the value of the new context element is different from the previous value\&. 
.IP "\(bu" 2
the last context element was sent more that aMinDelay ago\&.
.PP
aMinDelay must be >= 0\&. If value is 0, context element will be forwarded each time the value changes\&.
.RE
.PP
.SS "Periodic Context Collector"
When extending AbstractPeriodicCollector, you need to implement the abstract method collect(), which will be called periodically to get the ContextElement to forward to the server\&. You can also implement onStart() and onStop() methods, to initialize / dispose some listeners to get the context element\&.
.br
 Here is an example of Periodic Collector that collects the device type\&. 
.PP
.nf
public class BatteryLevelPeriodicCollector extends AbstractPeriodicCollector<String> {

    public BatteryLevelPeriodicCollector(ClientChannel aClientChannel, Context aApplicationContext,
            long aPeriodInMilliSeconds) {
        super(aClientChannel, aApplicationContext, aPeriodInMilliSeconds);
    }

    @Override
    public ContextElement<String> collect() {
        Intent intent = getApplicationContext()\&.registerReceiver(null, new IntentFilter(Intent\&.ACTION_BATTERY_CHANGED));

        int level;
        level = getLevel(intent);

        int scale;
        scale = getScale(intent);

        ContextElement<String> contextElement = new ContextElement<String>(ContextAware\&.BATTERY_LEVEL_KEY,
                String\&.format('%d/%d', level, scale));
        return contextElement;
    }

    protected int getLevel(Intent aIntent) {
        int level = 0;
        if (aIntent != null) {
            level = aIntent\&.getIntExtra(BatteryManager\&.EXTRA_LEVEL, 0);
        }
        return level;
    }

    protected int getScale(Intent aIntent) {
        int level = 0;
        if (aIntent != null) {
            level = aIntent\&.getIntExtra(BatteryManager\&.EXTRA_SCALE, 0);
        }
        return level;
    }

    @Override
    public void onStart() {
        // NOOP

    }

    @Override
    public void onStop() {
        // NOOP

    }

}

.fi
.PP
 
.PP
\fBNote:\fP
.RS 4
The AbstractPeriodicCollector constructor requires an additional parameter called aPeriodInMilliSeconds which defines the delay between context updates, in milliseconds\&. It must be > 0\&.
.RE
.PP
.SH "Other Custom Context Collector"
.PP
If none of the 3 default collection mode (One Shot, On Change, Periodic) suits your needs, you can extend the AbstractCollector\&. You will need to implement \fBstart()\fP and \fBstop()\fP methods, and manually call sendContextElement method when ready to forward a context element to the server\&.
.br
.SH "Focus on a specific ContextCollector : the TagCollector"
.PP
The Context Awareness library provides a predefined ContextCollector called the TagCollector\&. This is a utility class that can be usefull to setup user tracking\&.
.br
 For instance, if you want to know the navigation path of you users, you can decide to tag each activity in your application\&. The following Activity could be used as base class for all Activities in your application, and will automatically send tag to the server as soon as the user navigates to the activity\&. 
.PP
.nf
public abstract class TaggedActivity extends Activity {

    private final String tag;

    public TaggedActivity(String aTag) {
        super();
        tag = Preconditions\&.checkNotNull(aTag, 'aTag cannot be null');

    }

    @Override
    protected void onCreate(Bundle aSavedInstanceState) {
        super\&.onCreate(aSavedInstanceState);
        if (isTaskRoot()) {
            MotwinFacade\&.initSettings(getApplicationContext());
        }
    }

    @Override
    protected void onStart() {
        super\&.onStart();

        MotwinFacade\&.connect();

    }

    @Override
    protected void onStop() {
        super\&.onStop();

        MotwinFacade\&.disconnect();

    }

    @Override
    protected void onResume() {
        super\&.onResume();

        MotwinFacade\&.getTagCollector()\&.setTag(tag);
    }

    @Override
    protected void onDestroy() {
        super\&.onDestroy();

        if (isTaskRoot()) {
            MotwinFacade\&.destroy();
        }
    }
}

.fi
.PP
.SH "Table of predefined ContextElements and Collectors"
.PP
The following table shows the list of predefined Context elements, and the associated Collectors\&.
.br
 Each Collector takes at least 2 parameters : the ClientChannel that will be used to forward Context Elements to the server, and the Android Context\&.
.br
 The Collectors utility class allows you to instanciate each one of these collectors\&. You can use the Collectors\&.Builder class to pass ClientChannel and Context arguments only once\&. ContextElement Type ContextElement Data Type Collector Class Collector Type Parameters  "accelerometerData" AccelerometerData AccelerometerOnChangeCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDelay : minimum delay between context updates, in milliseconds  
.PP
'batteryLevel' String
.br
<level>/<scale> BatteryLevelPeriodicCollector Periodic 
.PD 0

.IP "\(bu" 2
aPeriodInMilliSeconds : delay between context updates, in milliseconds  
.PP
'chargerType' String
.br
"USB", "AC", "Wireless", or "None" ChargerTypeCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDelay : minimum delay between context updates, in milliseconds  
.PP
'chargingState' Boolean
.br
TRUE if is charging, FALSE otherwise ChargingStateCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDelay : minimum delay between context updates, in milliseconds  
.PP
'cashEvent' String
.br
the stack trace of the exception CrashEventCollector On Change 
.PD 0

.IP "\(bu" 2
aExceptionHandler : a custom exception handler\&. Can be null (will then use the Thread default exception handler)  
.PP
'deviceOsVersion' String
.br
the \fCBuild\&.VERSION\&.RELEASE\fP value) DeviceOSVersionCollector One Shot 'deviceType' String
.br
the \fCBuild\&.MODEL\fP value) DeviceTypeCollector One Shot 'dockState' Boolean
.br
TRUE if is docked, FALSE otherwise DockStateCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDelay : minimum delay between context updates, in milliseconds  
.PP
'dockType' String
.br
'Desk', 'Car', 'Analog', 'Digital', 'None',or 'Unknown' DockTypeCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDelay : minimum delay between context updates, in milliseconds  
.PP
'geolocation' GeoLocData GeolocationOnChangeCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDistance : minimum distance between location updates, in meters  
.PP
'periodicGeolocation' GeoLocData GeolocationPeriodicCollector Periodic 
.PD 0

.IP "\(bu" 2
aDelay : delay between context updates, in milliseconds  
.PP
'language' String
.br
the language code for the default Locale LanguageCollector One Shot 'mobileCountryCode' String
.br
MCC MobileCountryCodeCollector One Shot 'mobileNetworkCode' String
.br
MNC MobileNetworkCodeCollector One Shot 'cellId' String
.br
GSM cell id NetworkIdentifierCollector One Shot 'networkReceptionStrengh' String
.br
GSM Signal Strength\&. Valid values are (0-31, 99) as defined in TS 27\&.007 8\&.5 NetworkReceptionCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDelay : minimum delay between context updates, in milliseconds  
.PP
'dataNetworkType' String
.br
the type of the network, for example 'WIFI' or 'MOBILE' NetworkTypeCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDelay : minimum delay between context updates, in milliseconds  
.PP
'roaming' Boolean
.br
TRUE if is roaming, FALSE otherwise RoamingCollector One Shot 'roamingCountryCode' String
.br
"International Roaming", "National Roaming", or "N\&.A\&." if not roaming RoamingCountryCodeCollector One Shot 'screenOrientation' String
.br
"Landscape", "Portrait",or "Unknown" ScreenOrientationCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDelay : minimum delay between context updates, in milliseconds  
.PP
'simState' String
.br
"Absent", "Network Locked", "Pin Required", "Puk Required", "Ready", or "Unknown" SimStateCollector One Shot 'soundMode' String
.br
"Normal", "Vibrate", "Silent", or "Unknown" SoundModeCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDelay : minimum delay between context updates, in milliseconds  
.PP
'soundOutput' String
.br
"Speakers", "Music", "Microphone Mute", "Bluetooth", or "Unknown" SoundOutputCollector On Change 
.PD 0

.IP "\(bu" 2
aMinDelay : minimum delay between context updates, in milliseconds  
.PP
'tag' String
.br
the Tag TagCollector On Change 'timeZone' String
.br
example : GMT+1:00 TimeZoneCollector One Shot 
